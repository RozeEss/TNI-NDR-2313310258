# üìÅ File: graph.py (Run with `streamlit run graph.py`)

import pandas as pd
from sklearn.linear_model import LinearRegression
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import streamlit as st
import warnings
from pandas.tseries.offsets import MonthBegin

# Suppress warnings for cleaner output
warnings.filterwarnings("ignore")

# Set font for Thai characters (if needed in plot)
matplotlib.rcParams['font.family'] = 'DejaVu Sans'

# Sidebar navigation
st.sidebar.title("‡πÄ‡∏°‡∏ô‡∏π")
page = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤", ["Graph", "About"])

# Function to convert Thai date to Gregorian date (YYYY-MM-DD)
def convert_thai_date(thai_date_str):
    try:
        thai_months = {
            "‡∏°.‡∏Ñ.": "01", "‡∏Å.‡∏û.": "02", "‡∏°‡∏µ.‡∏Ñ.": "03", "‡πÄ‡∏°.‡∏¢.": "04",
            "‡∏û.‡∏Ñ.": "05", "‡∏°‡∏¥.‡∏¢.": "06", "‡∏Å.‡∏Ñ.": "07", "‡∏™.‡∏Ñ.": "08",
            "‡∏Å.‡∏¢.": "09", "‡∏ï.‡∏Ñ.": "10", "‡∏û.‡∏¢.": "11", "‡∏ò.‡∏Ñ.": "12"
        }
        for th, num in thai_months.items():
            if th in thai_date_str:
                day, month_th, year_th = thai_date_str.replace(",", "").split()
                month = thai_months[month_th]
                year = int(year_th) - 543
                return f"{year}-{month}-{int(day):02d}"
        return None
    except Exception as e:
        st.warning(f"Error converting date '{thai_date_str}': {str(e)}")
        return None

# Load and prepare data (used in Graph page)
if page == "Graph":
    try:
        df = pd.read_excel("BYDCOM80_6M.xlsx", sheet_name="Sheet1", skiprows=1)
    except FileNotFoundError:
        st.error("Error: 'BYDCOM80_6M.xlsx' not found. Please ensure the file is in the same directory as this script.")
        st.stop()
    except Exception as e:
        st.error(f"Error loading Excel file: {str(e)}")
        st.stop()

    # Define column names
    df.columns = [
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î",
        "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á(%)", "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì(‡∏û‡∏±‡∏ô‡∏´‡∏∏‡πâ‡∏ô)", "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤(‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)"
    ]

    # Clean and convert dates
    df = df[~df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].isna() & ~df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].str.contains("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")]
    df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].apply(convert_thai_date)
    df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"])
    df = df.dropna()

    # Sort data by date
    df_sorted = df.sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")

    # Prepare data for linear regression
    X = df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].map(pd.Timestamp.toordinal).values.reshape(-1, 1)
    y = df_sorted["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î"].values

    # Fit linear regression model
    model = LinearRegression()
    model.fit(X, y)
    trend = model.predict(X)

# Page 1: Graph
if page == "Graph":
    st.title("BYDCOM80 Stock Price Trend Analysis (May 3 - Nov 3, 2025)")
    
    st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 3 ‡∏û.‡∏Ñ. 2568")

    # Plot the data with detailed annotations
    plt.figure(figsize=(14, 7))
    plt.plot(df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], y, label="Actual Closing Price", color="blue", linewidth=2)
    plt.plot(df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], trend, label="Trend (Linear Regression)", linestyle="--", color="red", linewidth=2)

    # Annotate start and end dates
    plt.annotate('Start: May 3, 2025', xy=(df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].iloc[0], y[0]), xytext=(df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].iloc[0], y[0] + 0.05),
                 arrowprops=dict(facecolor='black', shrink=0.05), fontsize=10)
    plt.annotate('End: Nov 3, 2025', xy=(df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].iloc[-1], y[-1]), xytext=(df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].iloc[-1], y[-1] - 0.05),
                 arrowprops=dict(facecolor='black', shrink=0.05), fontsize=10)

    # Set x-axis limits to exactly match the data range
    plt.xlim(df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].min(), df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].max())

    # Set monthly ticks on x-axis
    start_date = df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].min()
    end_date = df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].max()
    monthly_ticks = pd.date_range(start=start_date + MonthBegin(1), end=end_date, freq='MS')
    all_ticks = [start_date] + list(monthly_ticks)
    labels = [start_date.strftime('%b')] + [d.strftime('%b') for d in monthly_ticks]
    plt.xticks(all_ticks, labels, rotation=45)

    plt.title("BYDCOM80 Closing Price Trend (May 3 - Nov 3, 2025)", fontsize=16)
    plt.xlabel("Date", fontsize=14)
    plt.ylabel("Closing Price (Baht)", fontsize=14)
    plt.legend(fontsize=14)
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()

    # Display the plot in Streamlit
    st.pyplot(plt)

    # Add summary statistics
    st.subheader("‡∏™‡∏£‡∏∏‡∏õ")
    st.write(f'‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏Ç‡∏≠‡∏á BYDCOM80 ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà {y.mean():.4f} ‡∏ö‡∏≤‡∏ó ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà {y.max():.4f} ‡∏ö‡∏≤‡∏ó ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 0.0042 ‡∏ö‡∏≤‡∏ó ‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß')
    st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î")
    st.write(f"**‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏õ‡∏¥‡∏î:** {y.mean():.4f} Baht")
    st.write(f"**‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î:** {y.min():.4f} Baht")
    st.write(f"**‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:** {y.max():.4f} Baht")
    st.write(f"**‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° (‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô):** {model.coef_[0]:.6f} ‡∏ö‡∏≤‡∏ó/‡∏ß‡∏±‡∏ô")

# Page 2: About
if page == "About":
    st.title("‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
    st.markdown("""
    ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ BIS-419
‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Python ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, Git ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢ Streamlit
    """)

    